@using TaskManagementSystem.Helpers.Enums;
@using TaskManagementSystem.Web.Models.Common.Modals
@model TaskManagementSystem.Web.Models.TaskSheets.TaskSheetListViewModel
@{
    Layout = null;
    var taskSheetStatuses = Enum.GetValues(typeof(TaskSheetStatus)).Cast<TaskSheetStatus>().ToList();
    var TaskPriorities = Enum.GetValues(typeof(TaskPriority)).Cast<TaskPriority>().ToList();
}
<div class="modal fade" id="TaskSheetCreateModal" tabindex="-1" role="dialog" aria-labelledby="TaskSheetCreateModalLabel" data-backdrop="static">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            @await Html.PartialAsync("~/Views/Shared/Modals/_ModalHeader.cshtml", new ModalHeaderViewModel("Create New Task"))
            <form name="taskSheetCreateForm" role="form" class="form-horizontal">
                <div class="modal-body">
                    <div class="form-group row required">
                        <label class="col-md-3 col-form-label" for="Title">Title</label>
                        <div class="col-md-9">
                            <input id="Title" type="text" name="Title" class="form-control" required maxlength="32" minlength="2">
                        </div>
                    </div>
                    <div class="form-group row required">
                        <label class="col-md-3 col-form-label" for="description">Description</label>
                        <div class="col-md-9">
                            <input id="description" type="text" name="description" class="form-control" required maxlength="32" minlength="2">
                        </div>
                    </div>
                    <div class="form-group row required">
                        <label class="col-md-3 col-form-label" for="DueDate">Due Date</label>
                        <div class="col-md-9">
                            <input id="DueDate" type="date" name="DueDate" class="form-control" required>
                        </div>
                    </div>
                    <div class="form-group row required">
                        <label class="col-md-3 col-form-label" for="TaskStatus">Task Status</label>
                        <div class="col-md-9">
                            <select id="TaskStatus" name="TaskStatus" class="form-control" required>
                                <option value="0">Select</option>
                                @foreach (var status in taskSheetStatuses)
                                {
                                    <option value="@(Convert.ToInt32(status))">@status</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row required">
                        <label class="col-md-3 col-form-label" for="TaskPriority">Task Priority</label>
                        <div class="col-md-9">
                            <select id="TaskPriority" name="TaskPriority" class="form-control" required>
                                <option value="0">Select</option>
                                @foreach (var priority in TaskPriorities)
                                {
                                    <option value="@(Convert.ToInt32(priority))">@priority</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-3 col-form-label" for="UserId">Users</label>
                        <div class="col-md-9">
                            <select id="UserId" name="UserId" class="form-control" required>
                                <option value="0">Select</option>
                                @foreach (var user in Model.Users)
                                {
                                    <option value="@user.Id">@user.FullName</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-3 col-form-label" for="TeamId">Teams</label>
                        <div class="col-md-9">
                            <select id="TeamId" name="TeamId" class="form-control">
                                <option value="0">Select</option>
                                @foreach (var team in Model.Teams)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-md-3 col-form-label"> Depend on another Task?</label>
                        <div class="col-md-9">
                            <input type="checkbox" id="toggleCheckbox" onclick="toggleDependentTaskDiv()" />
                        </div>
                    </div>
                    <div class="form-group row" id="dependentTaskDiv" style="display:none;">
                        <label class="col-md-3 col-form-label" for="DependentTaskId">Dependent Task</label>
                        <div class="col-md-9">
                            <select id="DependentTaskId" name="DependentTaskId" class="form-control">
                                <option value="0">Select</option>
                                @foreach (var task in Model.DependentTask)
                                {
                                    <option value="@task.Id">@task.Title</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="form-group row required">
                            <label class="col-md-3 col-form-label" for="AttachmentId">Attachment</label>
                            <div class="col-md-9">
                                <input type="file" id="fileInput" style="display:none;">
                                <button type="button" id="uploadButton">
                                    Upload File
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                @await Html.PartialAsync("~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml")
            </form>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');

        uploadButton.addEventListener('click', function () {
            fileInput.click();
        });

        fileInput.addEventListener('change', function () {
            debugger;
            const files = fileInput.files;
            if (files.length > 0) {
                const file = files[0];
                uploadAttachment(file);
            }
        });

        function uploadAttachment(file) {
            debugger;

            fetch('api/attachment/uploadAttachment', {
                method: 'POST',
                body: file
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Server responded with error: ' + response.status + ' ' + response.statusText);
                    }
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                        throw new Error('Response was not JSON');
                    }
                })
                .then(data => {
                    console.log('Upload response:', data);
                    // Handle upload response
                })
                .catch(error => {
                    debugger;
                    console.error('Error uploading file:', error);
                    // Handle upload error
                });
        }
    });

</script>
